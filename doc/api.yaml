openapi: 3.0.3
info:
  title: WASAPhoto Backend - OpenAPI 3.0
  description: |-
    Keep in touch with your friends by sharing photos of special moments, thanks to WASAPhoto! You can
    upload your photos directly from your PC, and they will be visible to everyone following you.
  contact:
    email: deodati.2025953@studenti.uniroma1.it
  license:
    name: GPL 3.0
    url: https://www.gnu.org/licenses/gpl-3.0.en.html
  version: 1.0.0
servers:
  - url: "http://localhost:3000"
tags:
  - name: Account management
  - name: Followers
  - name: Post tools
  - name: Feed tools

paths:
  /login:
    get:
      tags:
        - Account management
      summary: Login
      description: Logs in the user, if it doesn't exist, registers the user
      operationId: login
      parameters:
        - in: query
          name: username
          description: Login username
          schema:
            $ref: '#/components/schemas/Username'
          required: true
      responses:
        '200':
          description: Successful operation
          headers:
            Set-Cookie:
              schema:
                type: string
                example: WASASESSIONID=user123; Path=/; HttpOnly
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Username'
        '201':
          description: User registered
          headers:
            Set-Cookie:
              schema:
                type: string
                example: WASASESSIONID=user123; Path=/; HttpOnly
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Username'
        '400':
          description: Invalid username, usernames should be between 3 and 127 characters long

  /setPP/{userID}:
    put:
      tags:
        - Account management
      summary: Set a profile picture
      description: |-
        Sets the profile picture for the logged in user, the picture should be provided in
        the request body in base64 encoding. Returns your user ID on success
      operationId: setProPic
      parameters:
        - in: path
          name: userID
          description: Your user ID (login name)
          schema:
            $ref: '#/components/schemas/Username'
          required: true
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '201':
          description: Operation successful
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Username'
        '400':
          description: Bad image
        '401':
          description: Unauthenticated
        '403':
          description: You cannot set somebody else's profile picture

  /users/{userID}:
    get:
      tags:
        - Feed tools
      summary: Profile info
      description: |-
        Returns information about a user (follower count, following count, profile picture (B64-encoded!) and posts)
        You need to be logged in (provide a valid auth token) in order to view posts. Otherwise, the 'posts' property
        will be empty
      operationId: getProfile
      parameters:
        - in: path
          name: userID
          required: true
          schema:
            $ref: '#/components/schemas/Username'
      responses:
        '200':
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: Bad auth token
        '403':
          description: 'Forbidden: user blocked you!'
        '404':
          description: User not found

  /users/{userID}/follow/{username}:
    put:
      tags:
        - Followers
      summary: Follow user
      description: Follows a user. On success returns the followed user's ID
      operationId: follow
      parameters:
        - in: path
          name: userID
          description: Your username
          required: true
          schema:
            $ref: '#/components/schemas/Username'
        - in: path
          name: username
          description: User to follow
          required: true
          schema:
            $ref: '#/components/schemas/Username'
      responses:
        '201':
          description: Successful operation
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Username'
        '400':
          description: bad auth token, already following or trying to follow yourself
        '401':
          description: Unauthenticated
        '403':
            description: 'Forbidden: user blocked you!'
        '404':
          description: User not found

  /users/{userID}/unfollow/{username}:
    delete:
      tags:
        - Followers
      summary: Unfollow user
      description: Unfollows a user
      operationId: unfollow
      parameters:
        - in: path
          name: userID
          description: Your username
          required: true
          schema:
            $ref: '#/components/schemas/Username'
        - in: path
          name: username
          description: User to unfollow
          required: true
          schema:
            type: string
      responses:
        '204':
          description: successful operation
        '400':
          description: Bad auth token, not following or trying to unfollow yourself
        '401':
          description: Unauthenticated
        '404':
          description: User not found or not following

  /users/{userID}/block/{username}:
    put:
      tags:
        - Followers
      summary: Block user
      description: |-
        Blocks annoying user. On success returns the blocked user's ID.
        Also removes the user from your followers
      operationId: block
      parameters:
        - in: path
          name: userID
          description: Your username
          required: true
          schema:
            $ref: '#/components/schemas/Username'
        - in: path
          name: username
          description: User to block
          required: true
          schema:
            $ref: '#/components/schemas/Username'
      responses:
        '201':
          description: Successful operation
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Username'
        '400':
          description: Bad auth token, already blocked or trying to block yourself
        '401':
          description: Unauthenticated
        '404':
          description: User not found

  /users/{userID}/unblock/{username}:
    delete:
      tags:
        - Followers
      summary: Ublock user
      description: unblocks a previously blocked user
      operationId: unblock
      parameters:
        - in: path
          name: userID
          description: Your username
          required: true
          schema:
            $ref: '#/components/schemas/Username'
        - in: path
          name: username
          description: User to unblock
          required: true
          schema:
            $ref: '#/components/schemas/Username'
      responses:
        '204':
          description: Successful operation
        '400':
          description: Bad auth token, not blocked or trying to unblock yourself
        '401':
          description: Unauthenticated
        '404':
          description: User not found

  /users/{userID}/followers:
    get:
      tags:
        - Followers
      summary: List followers
      description: See who is following you
      operationId: getFollowers
      parameters:
        - in: path
          name: userID
          description: Your username
          required: true
          schema:
            $ref: '#/components/schemas/Username'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ID'
        '400':
          description: Bad auth token
        '401':
          description: Unauthenticated
        '403':
          description: "Forbidden: cannot view somebody else's followers"

  /users/{userID}/followers/{username}/remove:
    delete:
      tags:
        - Followers
      summary: Remove follower
      description: Removes a follower from your followers' list
      operationId: removeFollower
      parameters:
        - in: path
          name: userID
          description: Your username
          required: true
          schema:
            $ref: '#/components/schemas/Username'
        - in: path
          name: username
          description: Follower to remove
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful operation
        '400':
          description: Bad auth token or trying to remove yourself
        '401':
          description: Unauthenticated
        '403':
          description: Trying to edit somebody else's followers
        '404':
          description: User not found or not following

  /users/{userID}/newpost:
    post:
      tags:
        - Post tools
      summary: New post
      description: Creates a new post with the supplied image and, optionally, a description. On success returns the post ID
      operationId: newPost
      parameters:
        - in: path
          name: userID
          description: Your username
          required: true
          schema:
            $ref: '#/components/schemas/Username'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostParams'
      responses:
        '201':
          description: Successful operation
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ID'
        '400':
          description: Bad auth token, malformed JSON, image too big or caption too long
        '401':
          description: Unauthenticated
        '403':
          description: Cannot post as somebody else

  /posts/{postID}:
    get:
      tags:
        - Post tools
      summary: Post info
      description: Get information on one post
      operationId: getPost
      parameters:
        - in: path
          name: postID
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Bad auth token
        '401':
          description: Unauthenticated
        '403':
          description: User blocked you!
        '404':
          description: Post not found

  /posts/{postID}/delete:
    delete:
      tags:
        - Post tools
      summary: Delete post
      description: Deletes one of your posts. Be careful! Once deleted, posts are lost forever!
      operationId: deletePost
      parameters:
        - in: path
          name: postID
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '204':
          description: Operation successful
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden, you cannot delete somebody else's posts!
        '404':
          description: Post not found

  /posts/{postID}/likes:
    get:
      tags:
        - Post tools
      summary: Get likes
      description: Get likes on YOUR post. Nobody but the author can see who liked a post
      operationId: getLikes
      parameters:
        - in: cookie
          name: WASASESSIONID
          description: Your session cookie
          required: true
          schema:
            $ref: '#/components/schemas/Username'
        - in: path
          name: postID
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
        '400':
          description: Bad cookie
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Post not found

  /feed/{userID}:
    get:
      tags:
        - Feed tools
      summary: Retrieve feed
      description: Retrieves your feed made of the posts of the accounts you follow in reverse chronological order
      operationId: getFeed
      parameters:
        - in: path
          name: userID
          description: Your username
          required: true
          schema:
            $ref: '#/components/schemas/Username'
      responses:
        '200':
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feed'
        '400':
          description: Bad auth token
        '401':
          description: Unauthenticated
        '403':
          description: Trying to view somebody else's feed

  /posts/{postID}/like/{userID}:
    put:
      tags:
        - Feed tools
      summary: Like a post
      description: Adds a like as the logged user. On success returns the new like count
      operationId: likePost
      parameters:
        - in: path
          name: userID
          description: Your username
          required: true
          schema:
            $ref: '#/components/schemas/Username'
        - in: path
          name: postID
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '201':
          description: Operation successful
          content:
            text/plain:
              schema:
                type: integer
        '400':
          description: Bad auth token or bad post ID
        '401':
          description: Unauthenticated
        '403':
          description: "Forbidden: user blocked you!"
        '404':
          description: Post not found

  /posts/{postID}/unlike/{userID}:
    delete:
      tags:
        - Feed tools
      summary: Unlikes a post
      description: Removes the like as the logged user (if any). On success returns the new like count
      operationId: unlikePost
      parameters:
        - in: path
          name: userID
          description: Your username
          required: true
          schema:
            $ref: '#/components/schemas/Username'
        - in: path
          name: postID
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Operation successful
          content:
            text/plain:
              schema:
                type: integer
        '400':
          description: Bad auth token, bad post ID or post wasn't liked
        '401':
          description: Unauthenticated
        '404':
          description: Post not found

  /posts/{postID}/comment/{userID}:
    post:
      tags:
        - Feed tools
      summary: Comment on a post
      description: Comments on a post. On success returns the new comment ID
      operationId: commentPost
      requestBody:
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/LargeText'
      parameters:
        - in: path
          name: userID
          description: Your username
          required: true
          schema:
            $ref: '#/components/schemas/Username'
        - in: path
          name: postID
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '201':
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ID'
        '400':
          description: Bad cookie, bad post ID, empty comment or comment too long
        '401':
          description: Unauthenticated
        '403':
          description: "Cannot comment no post: poster blocked you!"
        '404':
          description: Post not found

  /comments/{commentID}:
    get:
      tags:
        - Feed tools
      summary: Get comment
      description: Retrieves the comment associated with the supplied ID
      operationId: getComment
      parameters:
        - in: path
          name: commentID
          description: Comment ID
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '401':
          description: Unauthenticated
        '403':
          description: "Forbidden: author blocked you!"
        '404':
          description: Comment not found

  /comments/{commentID}/like/{userID}:
    put:
      tags:
        - Feed tools
      summary: Likes a comment
      description: Adds a like to a comment as the logged user. On success returns the new like count
      operationId: likeComment
      parameters:
        - in: path
          name: userID
          description: Your username
          required: true
          schema:
            $ref: '#/components/schemas/Username'
        - in: path
          name: commentID
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '201':
          description: Operation successful
          content:
            text/plain:
              schema:
                type: integer
        '400':
          description: Bad authentication token or bad comment ID
        '401':
          description: Unauthenticated
        '403':
          description: "Cannot like: author blocked you!"
        '404':
          description: Comment not found

  /comments/{commentID}/unlike/{userID}:
    delete:
      tags:
        - Feed tools
      summary: Unlike a comment
      description: Removes the like from a comment as the logged user (if any). On success returns the new like count
      operationId: unlikeComment
      parameters:
        - in: path
          name: userID
          description: Your username
          required: true
          schema:
            $ref: '#/components/schemas/Username'
        - in: path
          name: commentID
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Operation successful
          content:
            text/plain:
              schema:
                type: integer
        '400':
          description: Bad authentication token, bad comment ID or comment wasn't liked
        '401':
          description: Unauthenticated
        '404':
          description: Comment not found

  /comments/{commentID}/delete/{userID}:
    delete:
      tags:
        - Feed tools
      summary: Remove a comment
      description: Removes the specified comment. Only the author can do that!
      parameters:
      - in: path
        name: userID
        description: Your username
        required: true
        schema:
          $ref: '#/components/schemas/Username'
      - in: path
        name: commentID
        required: true
        schema:
          $ref: '#/components/schemas/ID'
      responses:
        '204':
          description: Successful operation
        '400':
          description: Bad comment ID
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden, you cannot delete somebody else's comment!
        '404':
          description: Comment not found

  /searchUser:
    get:
      tags:
        - Followers
      summary: Search for users
      description: Search registered users on the website
      parameters:
        - in: query
          name: q
          description: Your search query
          required: true
          schema:
            $ref: '#/components/schemas/Username'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
        '400':
          description: Empty query

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

  schemas:
    ID:
      type: integer
      format: int64
      description: ID represents an integer used as an identifier (such as postID and commentID)
      minimum: 0
      example: 32156

    Counter:
      type: integer
      format: uint64
      description: A counter used to represent likes/comments/followers counts
      minimum: 0
      example: 80

    Username:
      type: string
      description: A valid username, case-insensitive
      minLength: 3
      maxLength: 127
      example: user123

    B64Image:
      type: string
      format: binary
      maxLength: 3000000    # images up to about 2 MB are supported
      description: An image encoded in base64

    LargeText:
      type: string
      description: A large text, used in post captions and comments
      minLength: 0
      maxLength: 2048
      example: Currently working on WASAPhoto!

    Account:
      type: object
      description: A JSON representing a user account
      properties:
        username:
          $ref: '#/components/schemas/Username'
        proPicB64:
          $ref: '#/components/schemas/B64Image'
        followers:
          $ref: '#/components/schemas/Counter'
        following:
          $ref: '#/components/schemas/Counter'
        posts:
          type: array
          description: Posts by this user as postIDs
          items:
            $ref: '#/components/schemas/ID'

    Post:
      type: object
      description: A JSON representing a post
      properties:
        postID:
          $ref: '#/components/schemas/ID'
        author:
          $ref: '#/components/schemas/Username'
        pubTime:
          type: string
          description: Publication time for this post
          example: 2024-05-24T15:00:00
        imageB64:
          $ref: '#/components/schemas/B64Image'
        caption:
          $ref: '#/components/schemas/LargeText'
        likeCount:
          $ref: '#/components/schemas/Counter'
        comments:
          $ref: '#/components/schemas/CommentList'

    PostParams:
      type: object
      description: |-
        A JSON containing all the required parameters
        to ask the backend to create a new post
      properties:
        image:
          $ref: '#/components/schemas/B64Image'
        caption:
          $ref: '#/components/schemas/LargeText'

    UserList:
      type: array
      description: A list of users
      items:
        $ref: '#/components/schemas/Username'

    Comment:
      type: object
      description: A JSON representing a comment
      properties:
        id:
          $ref: '#/components/schemas/ID'
        author:
          $ref: '#/components/schemas/Username'
        likes:
          $ref: '#/components/schemas/Counter'
        content:
          $ref: '#/components/schemas/LargeText'

    CommentList:
      type: array
      description: A list of comments (as commentIDs) belonging to a specific post
      items:
        $ref: '#/components/schemas/ID'

    Feed:
      type: array
      description: |-
        A list of posts (as postIDs) in reverse chronological order, representing a user's feed
      items:
        $ref: '#/components/schemas/ID'

security:
  - bearerAuth: []

openapi: 3.0.3
info:
  title: WASAPhoto Backend - OpenAPI 3.0
  description: |-
    Keep in touch with your friends by sharing photos of special moments, thanks to WASAPhoto! You can
    upload your photos directly from your PC, and they will be visible to everyone following you.
  contact:
    email: deodati.2025953@studenti.uniroma1.it
  license:
    name: GPL 3.0
    url: https://www.gnu.org/licenses/gpl-3.0.en.html
  version: 1.0.0
servers:
  - url: "http://localhost:3000"
tags:
  - name: Login
  - name: Account management
  - name: Followers
  - name: Post tools
  - name: Feed tools

paths:
  /session:
    post:
      tags:
        - Login
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/Username'
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    $ref: '#/components/schemas/ID'

  /setUsername/{userID}:
    put:
      tags:
        - Login
      summary: Sets the username
      description: Changes the logged in user's username. Returns the same username on success
      operationId: setMyUserName
      parameters:
        - in: path
          name: userID
          description: Your user ID (login name)
          schema:
            $ref: '#/components/schemas/ID'
          required: true
      requestBody:
        description: Username to set in plain text
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/Username'
      responses:
        '200':
          description: Operation successful
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Username'
        '401':
          description: Unauthenticated
        '403':
          description: Username already taken

  /setPP/{userID}:
    put:
      tags:
        - Account management
      summary: Set a profile picture
      description: |-
        Sets the profile picture for the logged in user, the picture should be provided in
        the request body in base64 encoding. Returns your user ID on success
      operationId: setProPic
      parameters:
        - in: path
          name: userID
          description: Your user ID (login name)
          schema:
            $ref: '#/components/schemas/ID'
          required: true
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/B64Image'
      responses:
        '200':
          description: Operation successful
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ID'
        '400':
          description: Bad image or bad userID
        '401':
          description: Unauthenticated
        '403':
          description: You cannot set somebody else's profile picture

  /users/{userID}:
    get:
      tags:
        - Feed tools
      summary: Profile info
      description: |-
        Returns information about a user (follower count, following count, profile picture (B64-encoded!) and posts)
        You need to be logged in (provide a valid auth token) in order to view posts. Otherwise, the 'posts' property
        will be empty
      operationId: getUserProfile
      parameters:
        - in: path
          name: userID
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: Bad auth token or bad userID
        '403':
          description: 'Forbidden: user blocked you!'
        '404':
          description: User not found

  /users/{userID}/follow/{toFollowID}:
    post:
      tags:
        - Followers
      summary: Follow user
      description: Follows a user. On success returns the followed user's ID
      operationId: followUser
      parameters:
        - in: path
          name: userID
          description: Your ID
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - in: path
          name: toFollowID
          description: User to follow
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '201':
          description: Successful operation
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ID'
        '400':
          description: bad auth token, bad userID, already following or trying to follow yourself
        '401':
          description: Unauthenticated
        '403':
            description: 'Forbidden: user blocked you!'
        '404':
          description: User not found

  /users/{userID}/unfollow/{toUnfollowID}:
    delete:
      tags:
        - Followers
      summary: Unfollow user
      description: Unfollows a user
      operationId: unfollowUser
      parameters:
        - in: path
          name: userID
          description: Your ID
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - in: path
          name: toUnfollowID
          description: User to unfollow
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '204':
          description: Successful operation
        '400':
          description: Bad auth token, bad userID or trying to unfollow yourself
        '401':
          description: Unauthenticated
        '404':
          description: User not found or not following

  /users/{userID}/block/{toBlockID}:
    post:
      tags:
        - Followers
      summary: Block user
      description: |-
        Blocks annoying user. On success returns the blocked user's ID.
        Also removes the user from your followers
      operationId: banUser
      parameters:
        - in: path
          name: userID
          description: Your ID
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - in: path
          name: toBlockID
          description: User to block
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '201':
          description: Successful operation
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ID'
        '400':
          description: Bad auth token, bad userID, already blocked or trying to block yourself
        '401':
          description: Unauthenticated
        '404':
          description: User not found

  /users/{userID}/unblock/{toUnblockID}:
    delete:
      tags:
        - Followers
      summary: Ublock user
      description: unblocks a previously blocked user
      operationId: unbanUser
      parameters:
        - in: path
          name: userID
          description: Your ID
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - in: path
          name: toUnblockID
          description: User to unblock
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '204':
          description: Successful operation
        '400':
          description: Bad auth token, bad userID or trying to unblock yourself
        '401':
          description: Unauthenticated
        '404':
          description: User not found or not blocked

  /users/{userID}/followers:
    get:
      tags:
        - Followers
      summary: List followers
      description: See who is following you
      operationId: getFollowers
      parameters:
        - in: path
          name: userID
          description: Your ID
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ID'
        '400':
          description: Bad auth token
        '401':
          description: Unauthenticated
        '403':
          description: "Forbidden: cannot view somebody else's followers"

  /users/{userID}/following:
    get:
      tags:
        - Followers
      summary: List follows
      description: See who you're following
      operationId: getFollowing
      parameters:
        - in: path
          name: userID
          description: Your ID
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ID'
        '400':
          description: Bad auth token
        '401':
          description: Unauthenticated
        '403':
          description: "Forbidden: cannot view somebody else's follows"

  /users/{userID}/blocked:
    get:
      tags:
        - Followers
      summary: List blocked
      description: See who you've blocked
      operationId: getBlocked
      parameters:
        - in: path
          name: userID
          description: Your ID
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ID'
        '400':
          description: Bad auth token
        '401':
          description: Unauthenticated
        '403':
          description: "Forbidden: cannot view somebody else's blocks"

  /users/{userID}/followers/{toRemoveID}/remove:
    delete:
      tags:
        - Followers
      summary: Remove follower
      description: Removes a follower from your followers' list
      operationId: removeFollower
      parameters:
        - in: path
          name: userID
          description: Your ID
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - in: path
          name: toRemoveID
          description: Follower to remove
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '204':
          description: Successful operation
        '400':
          description: Bad auth token or trying to remove yourself
        '401':
          description: Unauthenticated
        '403':
          description: Trying to edit somebody else's followers
        '404':
          description: User not found or not following

  /users/{userID}/newpost:
    post:
      tags:
        - Post tools
      summary: New post
      description: Creates a new post with the supplied image and, optionally, a description. On success returns the post ID
      operationId: uploadPhoto
      parameters:
        - in: path
          name: userID
          description: Your ID
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostParams'
      responses:
        '201':
          description: Successful operation
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ID'
        '400':
          description: Bad auth token or userID, malformed post object, image too big or caption too long
        '401':
          description: Unauthenticated
        '403':
          description: Cannot post as somebody else

  /posts/{postID}:
    get:
      tags:
        - Post tools
      summary: Post info
      description: Get information on one post
      operationId: getPost
      parameters:
        - in: path
          name: postID
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Bad auth token
        '401':
          description: Unauthenticated
        '403':
          description: User blocked you!
        '404':
          description: Post not found

  /posts/{postID}/delete:
    delete:
      tags:
        - Post tools
      summary: Delete post
      description: Deletes one of your posts. Be careful! Once deleted, posts are lost forever!
      operationId: deletePhoto
      parameters:
        - in: path
          name: postID
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '204':
          description: Operation successful
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden, you cannot delete somebody else's posts!
        '404':
          description: Post not found

  /posts/{postID}/likes:
    get:
      tags:
        - Post tools
      summary: Get likes
      description: Get likes on YOUR post. Nobody but the author can see who liked a post
      operationId: getLikes
      parameters:
        - in: cookie
          name: WASASESSIONID
          description: Your session cookie
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - in: path
          name: postID
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
        '400':
          description: Bad auth token
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Post not found

  /feed/{userID}:
    get:
      tags:
        - Feed tools
      summary: Retrieve feed
      description: Retrieves your feed made of the posts of the accounts you follow in reverse chronological order
      operationId: getMyStream
      parameters:
        - in: path
          name: userID
          description: Your ID
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feed'
        '401':
          description: Unauthenticated
        '403':
          description: Trying to view somebody else's feed

  /posts/{postID}/liked/{userID}:
    get:
      tags:
        - Feed tools
      summary: Is post liked?
      description: Checks whether the post has been liked by user
      operationId: isLiked
      parameters:
        - in: path
          name: userID
          description: Your ID
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - in: path
          name: postID
          description: Post ID
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Operation successful
          content:
            text/plain:
              schema:
                type: boolean
        '401':
          description: Unauthenticated or bad authentication
        '404':
          description: Post not found

  /posts/{postID}/like/{userID}:
    put:
      tags:
        - Feed tools
      summary: Like a post
      description: Adds a like as the logged user. On success returns the new like count
      operationId: likePhoto
      parameters:
        - in: path
          name: userID
          description: Your ID
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - in: path
          name: postID
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '201':
          description: Operation successful
          content:
            text/plain:
              schema:
                type: integer
        '400':
          description: Bad auth token or bad post ID
        '401':
          description: Unauthenticated
        '403':
          description: "Forbidden: user blocked you!"
        '404':
          description: Post not found

  /posts/{postID}/unlike/{userID}:
    delete:
      tags:
        - Feed tools
      summary: Unlikes a post
      description: Removes the like as the logged user (if any). On success returns the new like count
      operationId: unlikePhoto
      parameters:
        - in: path
          name: userID
          description: Your ID
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - in: path
          name: postID
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Operation successful
          content:
            text/plain:
              schema:
                type: integer
        '400':
          description: Bad auth token, bad post ID or post wasn't liked
        '401':
          description: Unauthenticated
        '404':
          description: Post not found

  /posts/{postID}/comment/{userID}:
    post:
      tags:
        - Feed tools
      summary: Comment on a post
      description: Comments on a post. On success returns the new comment ID
      operationId: commentPhoto
      requestBody:
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/LargeText'
      parameters:
        - in: path
          name: userID
          description: Your ID
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - in: path
          name: postID
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '201':
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ID'
        '400':
          description: Empty comment or comment too long
        '401':
          description: Unauthenticated
        '403':
          description: "Cannot comment no post: poster blocked you!"
        '404':
          description: Post not found

  /comments/{commentID}:
    get:
      tags:
        - Feed tools
      summary: Get comment
      description: Retrieves the comment associated with the supplied ID
      operationId: getComment
      parameters:
        - in: path
          name: commentID
          description: Comment ID
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '401':
          description: Unauthenticated
        '403':
          description: "Forbidden: author blocked you!"
        '404':
          description: Comment not found

  /comments/{commentID}/like/{userID}:
    put:
      tags:
        - Feed tools
      summary: Likes a comment
      description: Adds a like to a comment as the logged user. On success returns the new like count
      operationId: likeComment
      parameters:
        - in: path
          name: userID
          description: Your ID
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - in: path
          name: commentID
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '201':
          description: Operation successful
          content:
            text/plain:
              schema:
                type: integer
        '400':
          description: Bad authentication token or bad comment ID
        '401':
          description: Unauthenticated
        '403':
          description: "Cannot like: author blocked you!"
        '404':
          description: Comment not found

  /comments/{commentID}/unlike/{userID}:
    delete:
      tags:
        - Feed tools
      summary: Unlike a comment
      description: Removes the like from a comment as the logged user (if any). On success returns the new like count
      operationId: unlikeComment
      parameters:
        - in: path
          name: userID
          description: Your ID
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - in: path
          name: commentID
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Operation successful
          content:
            text/plain:
              schema:
                type: integer
        '400':
          description: Bad authentication token, userID or comment ID
        '401':
          description: Unauthenticated
        '404':
          description: Comment not found or comment wasn't liked

  /comments/{commentID}/liked/{userID}:
    get:
      tags:
        - Feed tools
      summary: Is comment liked?
      description: Checks whether the comment has been liked by user
      operationId: isCommentLiked
      parameters:
        - in: path
          name: userID
          description: Your ID
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - in: path
          name: commentID
          description: Comment ID
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Operation successful
          content:
            text/plain:
              schema:
                type: boolean
        '401':
          description: Unauthenticated or bad authentication
        '404':
          description: Post not found

  /comments/{commentID}/delete/{userID}:
    delete:
      tags:
        - Feed tools
      summary: Remove a comment
      description: Removes the specified comment. Only the author can do that!
      operationId: uncommentPhoto
      parameters:
      - in: path
        name: userID
        description: Your ID
        required: true
        schema:
          $ref: '#/components/schemas/ID'
      - in: path
        name: commentID
        required: true
        schema:
          $ref: '#/components/schemas/ID'
      responses:
        '204':
          description: Successful operation
        '400':
          description: Bad comment ID
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden, you cannot delete somebody else's comment!
        '404':
          description: Comment not found

  /searchUser:
    get:
      tags:
        - Followers
      summary: Search for users
      description: Search registered users on the website
      operationId: searchUser
      parameters:
        - in: query
          name: q
          description: Your search query
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
        '400':
          description: Empty query

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

  schemas:
    ID:
      type: integer
      format: int64
      description: ID represents an integer used as an identifier (such as postID and commentID)
      minimum: 0
      example: 32156

    Counter:
      type: integer
      format: uint64
      description: A counter used to represent likes/comments/followers counts
      minimum: 0
      example: 80

    Username:
      type: string
      example: Maria
      pattern: 'ˆ.*?$'
      description: Case-insensitive username
      minLength: 3
      maxLength: 40

    B64Image:
      type: string
      format: binary
      maxLength: 3000000    # images up to about 2 MB are supported
      description: An image encoded in base64

    LargeText:
      type: string
      description: A large text, used in post captions and comments
      pattern: '^.*?$'
      minLength: 0
      maxLength: 2048
      example: Currently working on WASAPhoto!

    Account:
      type: object
      description: An object representing a user account
      properties:
        ID:
          $ref: '#/components/schemas/ID'
        proPicB64:
          $ref: '#/components/schemas/B64Image'
        followers:
          $ref: '#/components/schemas/Counter'
        following:
          $ref: '#/components/schemas/Counter'
        posts:
          type: array
          description: Posts by this user as postIDs
          items:
            $ref: '#/components/schemas/ID'

    Post:
      type: object
      description: An object representing a post
      properties:
        postID:
          $ref: '#/components/schemas/ID'
        author:
          $ref: '#/components/schemas/ID'
        pubTime:
          type: string
          format: date-time
          description: Publication time for this post
          example: 2024-05-24T15:00:00
        imageB64:
          $ref: '#/components/schemas/B64Image'
        caption:
          $ref: '#/components/schemas/LargeText'
        likeCount:
          $ref: '#/components/schemas/Counter'
        comments:
          $ref: '#/components/schemas/CommentList'

    PostParams:
      type: object
      description: |-
        An object containing all the required parameters
        to ask the backend to create a new post
      properties:
        image:
          $ref: '#/components/schemas/B64Image'
        caption:
          $ref: '#/components/schemas/LargeText'

    UserList:
      type: array
      description: A list of users
      items:
        $ref: '#/components/schemas/ID'

    Comment:
      type: object
      description: An object representing a comment
      properties:
        id:
          $ref: '#/components/schemas/ID'
        author:
          $ref: '#/components/schemas/ID'
        likes:
          $ref: '#/components/schemas/Counter'
        content:
          $ref: '#/components/schemas/LargeText'

    CommentList:
      type: array
      description: A list of comments (as commentIDs) belonging to a specific post
      items:
        $ref: '#/components/schemas/ID'

    Feed:
      type: array
      description: |-
        A list of posts (as postIDs) in reverse chronological order, representing a user's feed
      items:
        $ref: '#/components/schemas/ID'

security:
  - bearerAuth: []

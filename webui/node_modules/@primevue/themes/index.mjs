function ownKeys$2(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$2(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2(Object(t), !0).forEach(function (r) { _defineProperty$3(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty$3(e, r, t) { return (r = _toPropertyKey$3(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey$3(t) { var i = _toPrimitive$3(t, "string"); return "symbol" == _typeof$3(i) ? i : i + ""; }
function _toPrimitive$3(t, r) { if ("object" != _typeof$3(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof$3(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _toConsumableArray$2(r) { return _arrayWithoutHoles$2(r) || _iterableToArray$2(r) || _unsupportedIterableToArray$3(r) || _nonIterableSpread$2(); }
function _nonIterableSpread$2() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray$3(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray$3(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$3(r, a) : void 0; } }
function _iterableToArray$2(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles$2(r) { if (Array.isArray(r)) return _arrayLikeToArray$3(r); }
function _arrayLikeToArray$3(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _typeof$3(o) { "@babel/helpers - typeof"; return _typeof$3 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof$3(o); }
var SharedUtils = {
  object: {
    isEmpty: function isEmpty(value) {
      return value === null || value === undefined || value === '' || Array.isArray(value) && value.length === 0 || !(value instanceof Date) && _typeof$3(value) === 'object' && Object.keys(value).length === 0;
    },
    isNotEmpty: function isNotEmpty(value) {
      return !this.isEmpty(value);
    },
    isFunction: function isFunction(value) {
      return !!(value && value.constructor && value.call && value.apply);
    },
    isObject: function isObject(value) {
      var empty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      return value instanceof Object && value.constructor === Object && (empty || Object.keys(value).length !== 0);
    },
    isArray: function isArray(value) {
      var empty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      return Array.isArray(value) && (empty || value.length !== 0);
    },
    isString: function isString(value) {
      var empty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      return typeof value === 'string' && (empty || value !== '');
    },
    isNumber: function isNumber(value) {
      return !isNaN(value);
    },
    toFlatCase: function toFlatCase(str) {
      // convert snake, kebab, camel and pascal cases to flat case
      return this.isString(str) ? str.replace(/(-|_)/g, '').toLowerCase() : str;
    },
    toKebabCase: function toKebabCase(str) {
      // convert snake, camel and pascal cases to kebab case
      return this.isString(str) ? str.replace(/(_)/g, '-').replace(/[A-Z]/g, function (c, i) {
        return i === 0 ? c : '-' + c.toLowerCase();
      }).toLowerCase() : str;
    },
    toTokenKey: function toTokenKey(str) {
      return this.isString(str) ? str.replace(/[A-Z]/g, function (c, i) {
        return i === 0 ? c : '.' + c.toLowerCase();
      }).toLowerCase() : str;
    },
    merge: function merge(value1, value2) {
      if (this.isArray(value1)) {
        value1.push.apply(value1, _toConsumableArray$2(value2 || []));
      } else if (this.isObject(value1)) {
        Object.assign(value1, value2);
      }
    },
    mergeKeysByRegex: function mergeKeysByRegex() {
      var _this = this;
      var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var regex = arguments.length > 2 ? arguments[2] : undefined;
      var mergedObj = _objectSpread$2({}, target);
      Object.keys(source).forEach(function (key) {
        if (_this.test(regex, key)) {
          if (_this.isObject(source[key]) && key in target && _this.isObject(target[key])) {
            mergedObj[key] = _this.mergeKeysByRegex(target[key], source[key], regex);
          } else {
            mergedObj[key] = source[key];
          }
        } else {
          mergedObj[key] = source[key];
        }
      });
      return mergedObj;
    },
    mergeKeys: function mergeKeys() {
      var _this2 = this;
      var _mergeKeys = function _mergeKeys() {
        var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var mergedObj = _objectSpread$2({}, target);
        Object.keys(source).forEach(function (key) {
          if (_this2.isObject(source[key]) && key in target && _this2.isObject(target[key])) {
            mergedObj[key] = _mergeKeys(target[key], source[key]);
          } else {
            mergedObj[key] = source[key];
          }
        });
        return mergedObj;
      };
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return args.reduce(function (acc, obj, i) {
        return i === 0 ? obj : _mergeKeys(acc, obj);
      }, {});
    },
    getItemValue: function getItemValue(obj) {
      for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        params[_key2 - 1] = arguments[_key2];
      }
      return this.isFunction(obj) ? obj.apply(void 0, params) : obj;
    },
    getOptionValue: function getOptionValue(options) {
      var _this3 = this;
      var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var fKeys = this.toFlatCase(key).split('.');
      var fKey = fKeys.shift();
      return fKey ? this.isObject(options) ? this.getOptionValue(this.getItemValue(options[Object.keys(options).find(function (k) {
        return _this3.toFlatCase(k) === fKey;
      }) || ''], params), fKeys.join('.'), params) : undefined : this.getItemValue(options, params);
    },
    test: function test(regex, str) {
      if (regex) {
        var match = regex.test(str);
        regex.lastIndex = 0;
        return match;
      }
      return false;
    },
    toValue: function toValue(value) {
      // Check for Figma (value-type)
      return this.isObject(value) && value.hasOwnProperty('value') && value.hasOwnProperty('type') ? value.value : value;
    },
    toUnit: function toUnit(value) {
      var _this4 = this;
      var variable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      var excludedProperties = ['opacity', 'z-index', 'line-height', 'font-weight', 'flex', 'flex-grow', 'flex-shrink', 'order'];
      if (!excludedProperties.some(function (property) {
        return variable.endsWith(property);
      })) {
        var val = "".concat(value).trim();
        var valArr = val.split(' ');
        return valArr.map(function (v) {
          return _this4.isNumber(v) ? "".concat(v, "px") : v;
        }).join(' ');
      }
      return value;
    },
    toNormalizePrefix: function toNormalizePrefix(prefix) {
      return prefix.replaceAll(/ /g, '').replace(/[^\w]/g, '-');
    },
    toNormalizeVariable: function toNormalizeVariable() {
      var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      var variable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      return this.toNormalizePrefix("".concat(this.isString(prefix, false) && this.isString(variable, false) ? "".concat(prefix, "-") : prefix).concat(variable));
    },
    getVariableName: function getVariableName() {
      var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      var variable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      return "--".concat(this.toNormalizeVariable(prefix, variable));
    },
    getVariableValue: function getVariableValue(value) {
      var _this5 = this;
      var variable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
      var excludedKeyRegexes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
      var fallback = arguments.length > 4 ? arguments[4] : undefined;
      if (this.isString(value)) {
        var regex = /{([^}]*)}/g;
        var val = value.trim();
        if (this.test(regex, val)) {
          var _val = val.replaceAll(regex, function (v) {
            var path = v.replace(/{|}/g, '');
            var keys = path.split('.').filter(function (_v) {
              return !excludedKeyRegexes.some(function (_r) {
                return _this5.test(_r, _v);
              });
            });
            return "var(".concat(_this5.getVariableName(prefix, _this5.toKebabCase(keys.join('-')))).concat(_this5.isNotEmpty(fallback) ? ", ".concat(fallback) : '', ")");
          });
          var calculationRegex = /(\d+\s+[\+\-\*\/]\s+\d+)/g;
          var cleanedVarRegex = /var\([^)]+\)/g;
          return this.test(calculationRegex, _val.replace(cleanedVarRegex, '0')) ? "calc(".concat(_val, ")") : _val;
        }
        return this.toUnit(val, variable);
      } else if (this.isNumber(value)) {
        return this.toUnit(value, variable);
      }
      return undefined;
    },
    getComputedValue: function getComputedValue() {
      var _this6 = this;
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var value = arguments.length > 1 ? arguments[1] : undefined;
      if (this.isString(value)) {
        var regex = /{([^}]*)}/g;
        var val = value.trim();
        return this.test(regex, val) ? val.replaceAll(regex, function (v) {
          return _this6.getOptionValue(obj, v.replace(/{|}/g, ''));
        }) : val;
      } else if (this.isNumber(value)) {
        return value;
      }
      return undefined;
    },
    setProperty: function setProperty(properties, key, value) {
      if (this.isString(key, false)) {
        properties.push("".concat(key, ":").concat(value, ";"));
      }
    },
    getRule: function getRule(selector, properties) {
      if (selector) {
        return "".concat(selector, "{").concat(properties, "}");
      }
      return '';
    },
    minifyCSS: function minifyCSS(css) {
      return css ? css.replace(/\/\*(?:(?!\*\/)[\s\S])*\*\/|[\r\n\t]+/g, '').replace(/ {2,}/g, ' ').replace(/ ([{:}]) /g, '$1').replace(/([;,]) /g, '$1').replace(/ !/g, '!').replace(/: /g, ':') : css;
    }
  },
  dom: {
    isClient: function isClient() {
      return !!(typeof window !== 'undefined' && window.document && window.document.createElement);
    },
    addClass: function addClass(element, className) {
      if (element && className && !this.hasClass(element, className)) {
        if (element.classList) element.classList.add(className);else element.className += ' ' + className;
      }
    },
    removeClass: function removeClass(element, className) {
      if (element && className) {
        if (element.classList) element.classList.remove(className);else element.className = element.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
      }
    },
    hasClass: function hasClass(element, className) {
      if (element) {
        if (element.classList) return element.classList.contains(className);else return new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className);
      }
      return false;
    },
    removeMultipleClasses: function removeMultipleClasses(element, classNames) {
      var _this7 = this;
      if (element && classNames) {
        [classNames].flat().filter(Boolean).forEach(function (cNames) {
          return cNames.split(' ').forEach(function (className) {
            return _this7.removeClass(element, className);
          });
        });
      }
    }
  }
};

function normalizeColor(color) {
  if (color.length === 4) {
    color = "#".concat(color[1]).concat(color[1]).concat(color[2]).concat(color[2]).concat(color[3]).concat(color[3]);
  }
  return color;
}
function hexToRgb(hex) {
  var bigint = parseInt(hex.substring(1), 16);
  var r = bigint >> 16 & 255;
  var g = bigint >> 8 & 255;
  var b = bigint & 255;
  return {
    r: r,
    g: g,
    b: b
  };
}
function rgbToHex(r, g, b) {
  return "#".concat(r.toString(16).padStart(2, '0')).concat(g.toString(16).padStart(2, '0')).concat(b.toString(16).padStart(2, '0'));
}
var mix = (function (color1, color2, weight) {
  color1 = normalizeColor(color1);
  color2 = normalizeColor(color2);
  var p = weight / 100;
  var w = p * 2 - 1;
  var w1 = (w + 1) / 2.0;
  var w2 = 1 - w1;
  var rgb1 = hexToRgb(color1);
  var rgb2 = hexToRgb(color2);
  var r = Math.round(rgb1.r * w1 + rgb2.r * w2);
  var g = Math.round(rgb1.g * w1 + rgb2.g * w2);
  var b = Math.round(rgb1.b * w1 + rgb2.b * w2);
  return rgbToHex(r, g, b);
});

var shade = (function (color, percent) {
  return mix('#000000', color, percent);
});

var tint = (function (color, percent) {
  return mix('#ffffff', color, percent);
});

var scales = [50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950];
var palette = (function (color) {
  if (/{([^}]*)}/g.test(color)) {
    var token = color.replace(/{|}/g, '');
    return scales.reduce(function (acc, scale) {
      return acc[scale] = "{".concat(token, ".").concat(scale, "}"), acc;
    }, {});
  }
  return typeof color === 'string' ? scales.reduce(function (acc, scale, i) {
    return acc[scale] = i <= 5 ? tint(color, (5 - i) * 19) : shade(color, (i - 5) * 15), acc;
  }, {}) : color;
});

function createService() {
  var allHandlers = new Map();
  return {
    on: function on(type, handler) {
      var handlers = allHandlers.get(type);
      if (!handlers) handlers = [handler];else handlers.push(handler);
      allHandlers.set(type, handlers);
      return this;
    },
    off: function off(type, handler) {
      var handlers = allHandlers.get(type);
      if (handlers) {
        handlers.splice(handlers.indexOf(handler) >>> 0, 1);
      }
      return this;
    },
    emit: function emit(type, evt) {
      var handlers = allHandlers.get(type);
      if (handlers) {
        handlers.slice().map(function (handler) {
          handler(evt);
        });
      }
    }
  };
}
var ThemeService = createService();

function _typeof$2(o) { "@babel/helpers - typeof"; return _typeof$2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof$2(o); }
function _toConsumableArray$1(r) { return _arrayWithoutHoles$1(r) || _iterableToArray$1(r) || _unsupportedIterableToArray$2(r) || _nonIterableSpread$1(); }
function _nonIterableSpread$1() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray$2(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray$2(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$2(r, a) : void 0; } }
function _iterableToArray$1(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles$1(r) { if (Array.isArray(r)) return _arrayLikeToArray$2(r); }
function _arrayLikeToArray$2(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function ownKeys$1(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$1(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty$2(e, r, t) { return (r = _toPropertyKey$2(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey$2(t) { var i = _toPrimitive$2(t, "string"); return "symbol" == _typeof$2(i) ? i : i + ""; }
function _toPrimitive$2(t, r) { if ("object" != _typeof$2(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof$2(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var Theme = {
  defaults: {
    variable: {
      prefix: 'p',
      selector: ':root',
      excludedKeyRegex: /^(primitive|semantic|components|directives|variables|colorscheme|light|dark|common|root|states)$/gi
    },
    options: {
      prefix: 'p',
      darkModeSelector: 'system',
      cssLayer: false
    }
  },
  _theme: undefined,
  _layerNames: new Set(),
  _loadedStyleNames: new Set(),
  _loadingStyles: new Set(),
  _tokens: {},
  update: function update() {
    var newValues = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var theme = newValues.theme;
    if (theme) {
      this._theme = _objectSpread$1(_objectSpread$1({}, theme), {}, {
        options: _objectSpread$1(_objectSpread$1({}, this.defaults.options), theme.options)
      });
      this._tokens = ThemeUtils.createTokens(this.preset, this.defaults);
      this.clearLoadedStyleNames();
    }
  },
  get theme() {
    return this._theme;
  },
  get preset() {
    var _this$theme;
    return ((_this$theme = this.theme) === null || _this$theme === void 0 ? void 0 : _this$theme.preset) || {};
  },
  get options() {
    var _this$theme2;
    return ((_this$theme2 = this.theme) === null || _this$theme2 === void 0 ? void 0 : _this$theme2.options) || {};
  },
  get tokens() {
    return this._tokens;
  },
  getTheme: function getTheme() {
    return this.theme;
  },
  setTheme: function setTheme(newValue) {
    this.update({
      theme: newValue
    });
    ThemeService.emit('theme:change', newValue);
  },
  getPreset: function getPreset() {
    return this.preset;
  },
  setPreset: function setPreset(newValue) {
    this._theme = _objectSpread$1(_objectSpread$1({}, this.theme), {}, {
      preset: newValue
    });
    this._tokens = ThemeUtils.createTokens(newValue, this.defaults);
    this.clearLoadedStyleNames();
    ThemeService.emit('preset:change', newValue);
    ThemeService.emit('theme:change', this.theme);
  },
  getOptions: function getOptions() {
    return this.options;
  },
  setOptions: function setOptions(newValue) {
    this._theme = _objectSpread$1(_objectSpread$1({}, this.theme), {}, {
      options: newValue
    });
    this.clearLoadedStyleNames();
    ThemeService.emit('options:change', newValue);
    ThemeService.emit('theme:change', this.theme);
  },
  getLayerNames: function getLayerNames() {
    return _toConsumableArray$1(this._layerNames);
  },
  setLayerNames: function setLayerNames(layerName) {
    this._layerNames.add(layerName);
  },
  getLoadedStyleNames: function getLoadedStyleNames() {
    return this._loadedStyleNames;
  },
  isStyleNameLoaded: function isStyleNameLoaded(name) {
    return this._loadedStyleNames.has(name);
  },
  setLoadedStyleName: function setLoadedStyleName(name) {
    this._loadedStyleNames.add(name);
  },
  deleteLoadedStyleName: function deleteLoadedStyleName(name) {
    this._loadedStyleNames["delete"](name);
  },
  clearLoadedStyleNames: function clearLoadedStyleNames() {
    this._loadedStyleNames.clear();
  },
  getTokenValue: function getTokenValue(tokenPath) {
    return ThemeUtils.getTokenValue(this.tokens, tokenPath, this.defaults);
  },
  getCommon: function getCommon() {
    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var params = arguments.length > 1 ? arguments[1] : undefined;
    return ThemeUtils.getCommon({
      name: name,
      theme: this.theme,
      params: params,
      defaults: this.defaults,
      set: {
        layerNames: this.setLayerNames.bind(this)
      }
    });
  },
  getComponent: function getComponent() {
    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var params = arguments.length > 1 ? arguments[1] : undefined;
    var options = {
      name: name,
      theme: this.theme,
      params: params,
      defaults: this.defaults,
      set: {
        layerNames: this.setLayerNames.bind(this)
      }
    };
    return ThemeUtils.getPresetC(options);
  },
  getDirective: function getDirective() {
    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var params = arguments.length > 1 ? arguments[1] : undefined;
    var options = {
      name: name,
      theme: this.theme,
      params: params,
      defaults: this.defaults,
      set: {
        layerNames: this.setLayerNames.bind(this)
      }
    };
    return ThemeUtils.getPresetD(options);
  },
  getCustomPreset: function getCustomPreset() {
    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var preset = arguments.length > 1 ? arguments[1] : undefined;
    var selector = arguments.length > 2 ? arguments[2] : undefined;
    var params = arguments.length > 3 ? arguments[3] : undefined;
    var options = {
      name: name,
      preset: preset,
      options: this.options,
      selector: selector,
      params: params,
      defaults: this.defaults,
      set: {
        layerNames: this.setLayerNames.bind(this)
      }
    };
    return ThemeUtils.getPreset(options);
  },
  getLayerOrderCSS: function getLayerOrderCSS() {
    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    return ThemeUtils.getLayerOrder(name, this.options, {
      names: this.getLayerNames()
    }, this.defaults);
  },
  transformCSS: function transformCSS() {
    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var css = arguments.length > 1 ? arguments[1] : undefined;
    var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'style';
    var mode = arguments.length > 3 ? arguments[3] : undefined;
    return ThemeUtils.transformCSS(name, css, mode, type, this.options, {
      layerNames: this.setLayerNames.bind(this)
    }, this.defaults);
  },
  getCommonStyleSheet: function getCommonStyleSheet() {
    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var params = arguments.length > 1 ? arguments[1] : undefined;
    var props = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    return ThemeUtils.getCommonStyleSheet({
      name: name,
      theme: this.theme,
      params: params,
      props: props,
      defaults: this.defaults,
      set: {
        layerNames: this.setLayerNames.bind(this)
      }
    });
  },
  getStyleSheet: function getStyleSheet(name, params) {
    var props = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    return ThemeUtils.getStyleSheet({
      name: name,
      theme: this.theme,
      params: params,
      props: props,
      defaults: this.defaults,
      set: {
        layerNames: this.setLayerNames.bind(this)
      }
    });
  },
  onStyleMounted: function onStyleMounted(name) {
    this._loadingStyles.add(name);
  },
  onStyleUpdated: function onStyleUpdated(name) {
    this._loadingStyles.add(name);
  },
  onStyleLoaded: function onStyleLoaded(event, _ref) {
    var name = _ref.name;
    if (this._loadingStyles.size) {
      this._loadingStyles["delete"](name);
      ThemeService.emit("theme:".concat(name, ":load"), event); // Exp: ThemeService.emit('theme:panel-style:load', event)
      !this._loadingStyles.size && ThemeService.emit('theme:load');
    }
  }
};

var $dt = function $dt(tokenPath) {
  var _variable$match;
  var theme = Theme.getTheme();
  var variable = dtwt(theme, tokenPath, undefined, 'variable');
  var name = (_variable$match = variable.match(/--[\w-]+/g)) === null || _variable$match === void 0 ? void 0 : _variable$match[0];
  var value = dtwt(theme, tokenPath, undefined, 'value');
  return {
    name: name,
    variable: variable,
    value: value
  };
};
var dt = function dt() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return dtwt.apply(void 0, [Theme.getTheme()].concat(args));
};
var dtwt = function dtwt() {
  var theme = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var tokenPath = arguments.length > 1 ? arguments[1] : undefined;
  var fallback = arguments.length > 2 ? arguments[2] : undefined;
  var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'variable';
  if (tokenPath) {
    var _ref = Theme.defaults || {},
      VARIABLE = _ref.variable,
      OPTIONS = _ref.options;
    var _ref2 = (theme === null || theme === void 0 ? void 0 : theme.options) || OPTIONS || {},
      prefix = _ref2.prefix,
      transform = _ref2.transform;
    var regex = /{([^}]*)}/g;
    var token = SharedUtils.object.test(regex, tokenPath) ? tokenPath : "{".concat(tokenPath, "}");
    var isStrictTransform = type === 'value' || transform === 'strict'; // @todo - TRANSFORM: strict | lenient(default)

    return isStrictTransform ? Theme.getTokenValue(tokenPath) : SharedUtils.object.getVariableValue(token, undefined, prefix, [VARIABLE.excludedKeyRegex], fallback);
  }
  return '';
};

var css = function css(style) {
  return SharedUtils.object.getItemValue(style, {
    dt: dt
  });
};

function _typeof$1(o) { "@babel/helpers - typeof"; return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof$1(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty$1(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty$1(e, r, t) { return (r = _toPropertyKey$1(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey$1(t) { var i = _toPrimitive$1(t, "string"); return "symbol" == _typeof$1(i) ? i : i + ""; }
function _toPrimitive$1(t, r) { if ("object" != _typeof$1(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof$1(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var $t = function $t() {
  var theme = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _preset = theme.preset,
    _options = theme.options;
  return {
    preset: function preset(value) {
      _preset = _preset ? SharedUtils.object.mergeKeys(_preset, value) : value;
      return this;
    },
    options: function options(value) {
      _options = _options ? _objectSpread(_objectSpread({}, _options), value) : value;
      return this;
    },
    // features
    primaryPalette: function primaryPalette(primary) {
      var _ref = _preset || {},
        semantic = _ref.semantic;
      _preset = _objectSpread(_objectSpread({}, _preset), {}, {
        semantic: _objectSpread(_objectSpread({}, semantic), {}, {
          primary: primary
        })
      });
      return this;
    },
    surfacePalette: function surfacePalette(surface) {
      var _semantic$colorScheme, _semantic$colorScheme2;
      var _ref2 = _preset || {},
        semantic = _ref2.semantic;
      var lightSurface = surface !== null && surface !== void 0 && surface.hasOwnProperty('light') ? surface === null || surface === void 0 ? void 0 : surface.light : surface;
      var darkSurface = surface !== null && surface !== void 0 && surface.hasOwnProperty('dark') ? surface === null || surface === void 0 ? void 0 : surface.dark : surface;
      var newColorScheme = {
        colorScheme: {
          light: _objectSpread(_objectSpread({}, semantic === null || semantic === void 0 || (_semantic$colorScheme = semantic.colorScheme) === null || _semantic$colorScheme === void 0 ? void 0 : _semantic$colorScheme.light), !!lightSurface && {
            surface: lightSurface
          }),
          dark: _objectSpread(_objectSpread({}, semantic === null || semantic === void 0 || (_semantic$colorScheme2 = semantic.colorScheme) === null || _semantic$colorScheme2 === void 0 ? void 0 : _semantic$colorScheme2.dark), !!darkSurface && {
            surface: darkSurface
          })
        }
      };
      _preset = _objectSpread(_objectSpread({}, _preset), {}, {
        semantic: _objectSpread(_objectSpread({}, semantic), newColorScheme)
      });
      return this;
    },
    // actions
    define: function define() {
      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref3$useDefaultPrese = _ref3.useDefaultPreset,
        useDefaultPreset = _ref3$useDefaultPrese === void 0 ? false : _ref3$useDefaultPrese,
        _ref3$useDefaultOptio = _ref3.useDefaultOptions,
        useDefaultOptions = _ref3$useDefaultOptio === void 0 ? false : _ref3$useDefaultOptio;
      return {
        preset: useDefaultPreset ? Theme.getPreset() : _preset,
        options: useDefaultOptions ? Theme.getOptions() : _options
      };
    },
    update: function update() {
      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref4$mergePresets = _ref4.mergePresets,
        mergePresets = _ref4$mergePresets === void 0 ? true : _ref4$mergePresets,
        _ref4$mergeOptions = _ref4.mergeOptions,
        mergeOptions = _ref4$mergeOptions === void 0 ? true : _ref4$mergeOptions;
      var newTheme = {
        preset: mergePresets ? SharedUtils.object.mergeKeys(Theme.getPreset(), _preset) : _preset,
        options: mergeOptions ? _objectSpread(_objectSpread({}, Theme.getOptions()), _options) : _options
      };
      Theme.setTheme(newTheme);
      return newTheme;
    },
    use: function use(options) {
      var newTheme = this.define(options);
      Theme.setTheme(newTheme);
      return newTheme;
    }
  };
};

function _slicedToArray$1(r, e) { return _arrayWithHoles$1(r) || _iterableToArrayLimit$1(r, e) || _unsupportedIterableToArray$1(r, e) || _nonIterableRest$1(); }
function _nonIterableRest$1() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray$1(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray$1(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$1(r, a) : void 0; } }
function _arrayLikeToArray$1(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit$1(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles$1(r) { if (Array.isArray(r)) return r; }
function toVariables (theme) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var VARIABLE = Theme.defaults.variable;
  var _options$prefix = options.prefix,
    prefix = _options$prefix === void 0 ? VARIABLE.prefix : _options$prefix,
    _options$selector = options.selector,
    selector = _options$selector === void 0 ? VARIABLE.selector : _options$selector,
    _options$excludedKeyR = options.excludedKeyRegex,
    excludedKeyRegex = _options$excludedKeyR === void 0 ? VARIABLE.excludedKeyRegex : _options$excludedKeyR;
  var _toVariables = function _toVariables(_theme) {
    var _prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    return Object.entries(_theme).reduce(function (acc, _ref) {
      var _ref2 = _slicedToArray$1(_ref, 2),
        key = _ref2[0],
        value = _ref2[1];
      var px = SharedUtils.object.test(excludedKeyRegex, key) ? SharedUtils.object.toNormalizeVariable(_prefix) : SharedUtils.object.toNormalizeVariable(_prefix, SharedUtils.object.toKebabCase(key));
      var v = SharedUtils.object.toValue(value);
      if (SharedUtils.object.isObject(v)) {
        var _toVariables2 = _toVariables(v, px),
          _variables = _toVariables2.variables,
          _tokens = _toVariables2.tokens;
        SharedUtils.object.merge(acc['tokens'], _tokens);
        SharedUtils.object.merge(acc['variables'], _variables);
      } else {
        acc['tokens'].push((prefix ? px.replace("".concat(prefix, "-"), '') : px).replaceAll('-', '.'));
        SharedUtils.object.setProperty(acc['variables'], SharedUtils.object.getVariableName(px), SharedUtils.object.getVariableValue(v, px, prefix, [excludedKeyRegex]));
      }
      return acc;
    }, {
      variables: [],
      tokens: []
    });
  };
  var _toVariables3 = _toVariables(theme, prefix),
    variables = _toVariables3.variables,
    tokens = _toVariables3.tokens;
  return {
    value: variables,
    tokens: tokens,
    declarations: variables.join(''),
    css: SharedUtils.object.getRule(selector, variables.join(''))
  };
}

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["colorScheme"],
  _excluded2 = ["dark"],
  _excluded3 = ["colorScheme"],
  _excluded4 = ["dark"],
  _excluded5 = ["colorScheme"];
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], t.indexOf(o) >= 0 || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.indexOf(n) >= 0) continue; t[n] = r[n]; } return t; }
var ThemeUtils = {
  regex: {
    rules: {
      "class": {
        pattern: /^\.([a-zA-Z][\w-]*)$/,
        resolve: function resolve(value) {
          return {
            type: 'class',
            selector: value,
            matched: this.pattern.test(value.trim())
          };
        }
      },
      attr: {
        pattern: /^\[(.*)\]$/,
        resolve: function resolve(value) {
          return {
            type: 'attr',
            selector: ":root".concat(value),
            matched: this.pattern.test(value.trim())
          };
        }
      },
      media: {
        pattern: /^@media (.*)$/,
        resolve: function resolve(value) {
          return {
            type: 'media',
            selector: "".concat(value, "{:root{[CSS]}}"),
            matched: this.pattern.test(value.trim())
          };
        }
      },
      system: {
        pattern: /^system$/,
        resolve: function resolve(value) {
          return {
            type: 'system',
            selector: '@media (prefers-color-scheme: dark){:root{[CSS]}}',
            matched: this.pattern.test(value.trim())
          };
        }
      },
      custom: {
        resolve: function resolve(value) {
          return {
            type: 'custom',
            selector: value,
            matched: true
          };
        }
      }
    },
    resolve: function resolve(value) {
      var _this = this;
      var rules = Object.keys(this.rules).filter(function (k) {
        return k !== 'custom';
      }).map(function (r) {
        return _this.rules[r];
      });
      return [value].flat().map(function (v) {
        var _rules$map$find;
        return (_rules$map$find = rules.map(function (r) {
          return r.resolve(v);
        }).find(function (rr) {
          return rr.matched;
        })) !== null && _rules$map$find !== void 0 ? _rules$map$find : _this.rules.custom.resolve(v);
      });
    }
  },
  _toVariables: function _toVariables(theme, options) {
    return toVariables(theme, {
      prefix: options === null || options === void 0 ? void 0 : options.prefix
    });
  },
  getCommon: function getCommon(_ref) {
    var _ref$name = _ref.name,
      name = _ref$name === void 0 ? '' : _ref$name,
      _ref$theme = _ref.theme,
      theme = _ref$theme === void 0 ? {} : _ref$theme;
      _ref.params;
      var set = _ref.set,
      defaults = _ref.defaults;
    var preset = theme.preset,
      options = theme.options;
    var primitive_css, primitive_tokens, semantic_css, semantic_tokens;
    if (SharedUtils.object.isNotEmpty(preset)) {
      var _prim_var$declaration, _sRest_var$declaratio, _csRest_var$declarati, _dark_var$declaration;
      var primitive = preset.primitive,
        semantic = preset.semantic;
      var _ref2 = semantic || {},
        colorScheme = _ref2.colorScheme,
        sRest = _objectWithoutProperties(_ref2, _excluded);
      var _ref3 = colorScheme || {},
        dark = _ref3.dark,
        csRest = _objectWithoutProperties(_ref3, _excluded2);
      var prim_var = SharedUtils.object.isNotEmpty(primitive) ? this._toVariables({
        primitive: primitive
      }, options) : {};
      var sRest_var = SharedUtils.object.isNotEmpty(sRest) ? this._toVariables({
        semantic: sRest
      }, options) : {};
      var csRest_var = SharedUtils.object.isNotEmpty(csRest) ? this._toVariables({
        light: csRest
      }, options) : {};
      var dark_var = SharedUtils.object.isNotEmpty(dark) ? this._toVariables({
        dark: dark
      }, options) : {};
      var _ref4 = [(_prim_var$declaration = prim_var.declarations) !== null && _prim_var$declaration !== void 0 ? _prim_var$declaration : '', prim_var.tokens],
        prim_css = _ref4[0],
        prim_tokens = _ref4[1];
      var sRest_css = (_sRest_var$declaratio = sRest_var.declarations) !== null && _sRest_var$declaratio !== void 0 ? _sRest_var$declaratio : '',
        sRest_tokens = sRest_var.tokens || [];
      var csRest_css = (_csRest_var$declarati = csRest_var.declarations) !== null && _csRest_var$declarati !== void 0 ? _csRest_var$declarati : '',
        csRest_tokens = csRest_var.tokens || [];
      var dark_css = (_dark_var$declaration = dark_var.declarations) !== null && _dark_var$declaration !== void 0 ? _dark_var$declaration : '',
        dark_tokens = dark_var.tokens || [];
      primitive_css = this.transformCSS(name, prim_css, 'light', 'variable', options, set, defaults);
      primitive_tokens = prim_tokens;
      var semantic_light_css = this.transformCSS(name, "".concat(sRest_css).concat(csRest_css, "color-scheme:light"), 'light', 'variable', options, set, defaults);
      var semantic_dark_css = this.transformCSS(name, "".concat(dark_css, "color-scheme:dark"), 'dark', 'variable', options, set, defaults);
      semantic_css = "".concat(semantic_light_css).concat(semantic_dark_css);
      semantic_tokens = _toConsumableArray(new Set([].concat(_toConsumableArray(sRest_tokens), _toConsumableArray(csRest_tokens), _toConsumableArray(dark_tokens))));
    }
    return {
      primitive: {
        css: primitive_css,
        tokens: primitive_tokens
      },
      semantic: {
        css: semantic_css,
        tokens: semantic_tokens
      }
    };
  },
  getPreset: function getPreset(_ref5) {
    var _vRest_var$declaratio, _csRest_var$declarati2, _dark_var$declaration2;
    var _ref5$name = _ref5.name,
      name = _ref5$name === void 0 ? '' : _ref5$name,
      _ref5$preset = _ref5.preset,
      preset = _ref5$preset === void 0 ? {} : _ref5$preset,
      options = _ref5.options;
      _ref5.params;
      var set = _ref5.set,
      defaults = _ref5.defaults,
      selector = _ref5.selector;
    var _name = name.replace('-directive', '');
    var colorScheme = preset.colorScheme,
      vRest = _objectWithoutProperties(preset, _excluded3);
    var _ref6 = colorScheme || {},
      dark = _ref6.dark,
      csRest = _objectWithoutProperties(_ref6, _excluded4);
    var vRest_var = SharedUtils.object.isNotEmpty(vRest) ? this._toVariables(_defineProperty({}, _name, vRest), options) : {};
    var csRest_var = SharedUtils.object.isNotEmpty(csRest) ? this._toVariables(_defineProperty({}, _name, csRest), options) : {};
    var dark_var = SharedUtils.object.isNotEmpty(dark) ? this._toVariables(_defineProperty({}, _name, dark), options) : {};
    var vRest_css = (_vRest_var$declaratio = vRest_var.declarations) !== null && _vRest_var$declaratio !== void 0 ? _vRest_var$declaratio : '',
      vRest_tokens = vRest_var.tokens || [];
    var csRest_css = (_csRest_var$declarati2 = csRest_var.declarations) !== null && _csRest_var$declarati2 !== void 0 ? _csRest_var$declarati2 : '',
      csRest_tokens = csRest_var.tokens || [];
    var dark_css = (_dark_var$declaration2 = dark_var.declarations) !== null && _dark_var$declaration2 !== void 0 ? _dark_var$declaration2 : '',
      dark_tokens = dark_var.tokens || [];
    var tokens = _toConsumableArray(new Set([].concat(_toConsumableArray(vRest_tokens), _toConsumableArray(csRest_tokens), _toConsumableArray(dark_tokens))));
    var light_variable_css = this.transformCSS(_name, "".concat(vRest_css).concat(csRest_css), 'light', 'variable', options, set, defaults, selector);
    var dark_variable_css = this.transformCSS(_name, dark_css, 'dark', 'variable', options, set, defaults, selector);
    return {
      css: "".concat(light_variable_css).concat(dark_variable_css),
      tokens: tokens
    };
  },
  getPresetC: function getPresetC(_ref7) {
    var _preset$components;
    var _ref7$name = _ref7.name,
      name = _ref7$name === void 0 ? '' : _ref7$name,
      _ref7$theme = _ref7.theme,
      theme = _ref7$theme === void 0 ? {} : _ref7$theme,
      params = _ref7.params,
      set = _ref7.set,
      defaults = _ref7.defaults;
    var preset = theme.preset,
      options = theme.options;
    var cPreset = preset === null || preset === void 0 || (_preset$components = preset.components) === null || _preset$components === void 0 ? void 0 : _preset$components[name];
    return this.getPreset({
      name: name,
      preset: cPreset,
      options: options,
      params: params,
      set: set,
      defaults: defaults
    });
  },
  getPresetD: function getPresetD(_ref8) {
    var _preset$directives;
    var _ref8$name = _ref8.name,
      name = _ref8$name === void 0 ? '' : _ref8$name,
      _ref8$theme = _ref8.theme,
      theme = _ref8$theme === void 0 ? {} : _ref8$theme,
      params = _ref8.params,
      set = _ref8.set,
      defaults = _ref8.defaults;
    var dName = name.replace('-directive', '');
    var preset = theme.preset,
      options = theme.options;
    var dPreset = preset === null || preset === void 0 || (_preset$directives = preset.directives) === null || _preset$directives === void 0 ? void 0 : _preset$directives[dName];
    return this.getPreset({
      name: dName,
      preset: dPreset,
      options: options,
      params: params,
      set: set,
      defaults: defaults
    });
  },
  getColorSchemeOption: function getColorSchemeOption(options, defaults) {
    var _options$darkModeSele;
    return this.regex.resolve((_options$darkModeSele = options.darkModeSelector) !== null && _options$darkModeSele !== void 0 ? _options$darkModeSele : defaults.options.darkModeSelector);
  },
  getLayerOrder: function getLayerOrder(name) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var params = arguments.length > 2 ? arguments[2] : undefined;
    var cssLayer = options.cssLayer;
    if (cssLayer) {
      var order = SharedUtils.object.getItemValue(cssLayer.order || 'primeui', params);
      return "@layer ".concat(order);
    }
    return '';
  },
  getCommonStyleSheet: function getCommonStyleSheet(_ref9) {
    var _ref9$name = _ref9.name,
      name = _ref9$name === void 0 ? '' : _ref9$name,
      _ref9$theme = _ref9.theme,
      theme = _ref9$theme === void 0 ? {} : _ref9$theme,
      params = _ref9.params,
      _ref9$props = _ref9.props,
      props = _ref9$props === void 0 ? {} : _ref9$props,
      set = _ref9.set,
      defaults = _ref9.defaults;
    var common = this.getCommon({
      name: name,
      theme: theme,
      params: params,
      set: set,
      defaults: defaults
    });
    var _props = Object.entries(props).reduce(function (acc, _ref10) {
      var _ref11 = _slicedToArray(_ref10, 2),
        k = _ref11[0],
        v = _ref11[1];
      return acc.push("".concat(k, "=\"").concat(v, "\"")) && acc;
    }, []).join(' ');
    return Object.entries(common || {}).reduce(function (acc, _ref12) {
      var _ref13 = _slicedToArray(_ref12, 2),
        key = _ref13[0],
        value = _ref13[1];
      if (value !== null && value !== void 0 && value.css) {
        var _css = SharedUtils.object.minifyCSS(value === null || value === void 0 ? void 0 : value.css);
        var id = "".concat(key, "-variables");
        acc.push("<style type=\"text/css\" data-primevue-style-id=\"".concat(id, "\" ").concat(_props, ">").concat(_css, "</style>"));
      }
      return acc;
    }, []).join('');
  },
  getStyleSheet: function getStyleSheet(_ref14) {
    var _ref15;
    var _ref14$name = _ref14.name,
      name = _ref14$name === void 0 ? '' : _ref14$name,
      _ref14$theme = _ref14.theme,
      theme = _ref14$theme === void 0 ? {} : _ref14$theme,
      params = _ref14.params,
      _ref14$props = _ref14.props,
      props = _ref14$props === void 0 ? {} : _ref14$props,
      set = _ref14.set,
      defaults = _ref14.defaults;
    var options = {
      name: name,
      theme: theme,
      params: params,
      set: set,
      defaults: defaults
    };
    var preset_css = (_ref15 = name.includes('-directive') ? this.getPresetD(options) : this.getPresetC(options)) === null || _ref15 === void 0 ? void 0 : _ref15.css;
    var _props = Object.entries(props).reduce(function (acc, _ref16) {
      var _ref17 = _slicedToArray(_ref16, 2),
        k = _ref17[0],
        v = _ref17[1];
      return acc.push("".concat(k, "=\"").concat(v, "\"")) && acc;
    }, []).join(' ');
    return preset_css ? "<style type=\"text/css\" data-primevue-style-id=\"".concat(name, "-variables\" ").concat(_props, ">").concat(SharedUtils.object.minifyCSS(preset_css), "</style>") : '';
  },
  createTokens: function createTokens() {
    var _this2 = this;
    var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var defaults = arguments.length > 1 ? arguments[1] : undefined;
    var parentKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
    var parentPath = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';
    var tokens = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
    Object.entries(obj).forEach(function (_ref18) {
      var _ref19 = _slicedToArray(_ref18, 2),
        key = _ref19[0],
        value = _ref19[1];
      var currentKey = SharedUtils.object.test(defaults.variable.excludedKeyRegex, key) ? parentKey : parentKey ? "".concat(parentKey, ".").concat(SharedUtils.object.toTokenKey(key)) : SharedUtils.object.toTokenKey(key);
      var currentPath = parentPath ? "".concat(parentPath, ".").concat(key) : key;
      if (SharedUtils.object.isObject(value)) {
        _this2.createTokens(value, defaults, currentKey, currentPath, tokens);
      } else {
        tokens[currentKey] || (tokens[currentKey] = {
          paths: [],
          computed: function computed(colorScheme) {
            var tokenPathMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            if (colorScheme) {
              var path = this.paths.find(function (p) {
                return p.scheme === colorScheme;
              }) || this.paths.find(function (p) {
                return p.scheme === 'none';
              });
              return path === null || path === void 0 ? void 0 : path.computed(colorScheme, tokenPathMap['binding']);
            }
            return this.paths.map(function (p) {
              return p.computed(p.scheme, tokenPathMap[p.scheme]);
            });
          }
        });
        tokens[currentKey].paths.push({
          path: currentPath,
          value: value,
          scheme: currentPath.includes('colorScheme.light') ? 'light' : currentPath.includes('colorScheme.dark') ? 'dark' : 'none',
          computed: function computed(colorScheme) {
            var _binding;
            var tokenPathMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var regex = /{([^}]*)}/g;
            var computedValue = value;
            tokenPathMap['name'] = this.path;
            tokenPathMap[_binding = 'binding'] || (tokenPathMap[_binding] = {});
            if (SharedUtils.object.test(regex, value)) {
              var val = value.trim();
              var _val = val.replaceAll(regex, function (v) {
                var _tokens$path;
                var path = v.replace(/{|}/g, '');
                return (_tokens$path = tokens[path]) === null || _tokens$path === void 0 || (_tokens$path = _tokens$path.computed(colorScheme, tokenPathMap)) === null || _tokens$path === void 0 ? void 0 : _tokens$path.value;
              });
              var calculationRegex = /(\d+\w*\s+[\+\-\*\/]\s+\d+\w*)/g;
              var cleanedVarRegex = /var\([^)]+\)/g;
              computedValue = SharedUtils.object.test(calculationRegex, _val.replace(cleanedVarRegex, '0')) ? "calc(".concat(_val, ")") : _val;
            }
            SharedUtils.object.isEmpty(tokenPathMap['binding']) && delete tokenPathMap['binding'];
            return {
              colorScheme: colorScheme,
              path: this.path,
              paths: tokenPathMap,
              value: computedValue.includes('undefined') ? undefined : computedValue
            };
          }
        });
      }
    });
    return tokens;
  },
  getTokenValue: function getTokenValue(tokens, path, defaults) {
    var _tokens$token;
    var normalizePath = function normalizePath(str) {
      var strArr = str.split('.');
      return strArr.filter(function (s) {
        return !SharedUtils.object.test(defaults.variable.excludedKeyRegex, s.toLowerCase());
      }).join('.');
    };
    var token = normalizePath(path);
    var colorScheme = path.includes('colorScheme.light') ? 'light' : path.includes('colorScheme.dark') ? 'dark' : undefined;
    var computedValues = [(_tokens$token = tokens[token]) === null || _tokens$token === void 0 ? void 0 : _tokens$token.computed(colorScheme)].flat().filter(function (computed) {
      return computed;
    });
    return computedValues.length === 1 ? computedValues[0].value : computedValues.reduce(function () {
      var acc = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var computed = arguments.length > 1 ? arguments[1] : undefined;
      var cs = computed.colorScheme,
        rest = _objectWithoutProperties(computed, _excluded5);
      acc[cs] = rest;
      return acc;
    }, undefined);
  },
  transformCSS: function transformCSS(name, css, mode, type) {
    var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
    var set = arguments.length > 5 ? arguments[5] : undefined;
    var defaults = arguments.length > 6 ? arguments[6] : undefined;
    var selector = arguments.length > 7 ? arguments[7] : undefined;
    if (SharedUtils.object.isNotEmpty(css)) {
      var cssLayer = options.cssLayer;
      if (type !== 'style') {
        var colorSchemeOption = this.getColorSchemeOption(options, defaults);
        var _css = selector ? SharedUtils.object.getRule(selector, css) : css;
        css = mode === 'dark' ? colorSchemeOption.reduce(function (acc, _ref20) {
          var _selector = _ref20.selector;
          if (SharedUtils.object.isNotEmpty(_selector)) {
            acc += _selector.includes('[CSS]') ? _selector.replace('[CSS]', _css) : SharedUtils.object.getRule(_selector, _css);
          }
          return acc;
        }, '') : SharedUtils.object.getRule(selector !== null && selector !== void 0 ? selector : ':root', css);
      }
      if (cssLayer) {
        var layerOptions = {
          name: 'primeui',
          order: 'primeui'
        };
        SharedUtils.object.isObject(cssLayer) && (layerOptions.name = SharedUtils.object.getItemValue(cssLayer.name, {
          name: name,
          type: type
        }));
        if (SharedUtils.object.isNotEmpty(layerOptions.name)) {
          css = SharedUtils.object.getRule("@layer ".concat(layerOptions.name), css);
          set === null || set === void 0 || set.layerNames(layerOptions.name);
        }
      }
      return css;
    }
    return '';
  }
};

var definePreset = (function () {
  var _SharedUtils$object;
  return (_SharedUtils$object = SharedUtils.object).mergeKeys.apply(_SharedUtils$object, arguments);
});

var updatePreset = (function () {
  var _SharedUtils$object;
  for (var _len = arguments.length, presets = new Array(_len), _key = 0; _key < _len; _key++) {
    presets[_key] = arguments[_key];
  }
  var newPreset = (_SharedUtils$object = SharedUtils.object).mergeKeys.apply(_SharedUtils$object, [Theme.getPreset()].concat(presets));
  Theme.setPreset(newPreset);
  return newPreset;
});

var updatePrimaryPalette = (function (primary) {
  return $t().primaryPalette(primary).update().preset;
});

var updateSurfacePalette = (function (surface) {
  return $t().surfacePalette(surface).update().preset;
});

var usePreset = (function () {
  var _SharedUtils$object;
  var newPreset = (_SharedUtils$object = SharedUtils.object).mergeKeys.apply(_SharedUtils$object, arguments);
  Theme.setPreset(newPreset);
  return newPreset;
});

var useTheme = (function (theme) {
  return $t(theme).update({
    mergePresets: false
  });
});

export { $dt, $t, SharedUtils, Theme, ThemeService, ThemeUtils, css, definePreset, dt, dtwt, mix, palette, shade, tint, toVariables, updatePreset, updatePrimaryPalette, updateSurfacePalette, usePreset, useTheme };
//# sourceMappingURL=index.mjs.map
